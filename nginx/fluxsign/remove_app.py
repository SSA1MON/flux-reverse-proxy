import datetime
import ipaddress
import json
import os
import re
import smtplib
import ssl
import subprocess
import sys
import urllib.parse
from email.message import EmailMessage
from typing import List, Tuple, Optional

import requests
from dotenv import load_dotenv
from loguru import logger

ENABLE_EMAIL_NOTIFICATIONS = False

# Load environment variables from .env file
load_dotenv()

# Configuration from environment
FLUX_API_URL = "https://api.runonflux.io"
FLUX_ID = os.getenv("FLUX_ID")
APP_NAME = os.getenv("APP_NAME")
EXTERNAL_API_URL = os.getenv("EXTERNAL_API_URL")

# Email settings
SMTP_SERVER = os.getenv("SMTP_SERVER")
SMTP_PORT = int(os.getenv("SMTP_PORT", 465))
EMAIL_SENDER = os.getenv("EMAIL_SENDER")
EMAIL_PASSWORD = os.getenv("EMAIL_PASSWORD")
EMAIL_RECIPIENT = os.getenv("EMAIL_RECIPIENT")


def send_email_after_removal(ip_address: str, removal_time: str):
    """
    Sends an email notification after an application is removed using SMTP without SSL.

    :param ip_address: The IP address of the removed application.
    :param removal_time: The timestamp when the removal happened.
    """
    if not ENABLE_EMAIL_NOTIFICATIONS:
        logger.info("üîï Email notifications are disabled.")
        return

    # Email content
    EMAIL_SUBJECT = "Application Removal Notification"
    EMAIL_BODY_TEMPLATE = """\
    Hello,

    The application associated with IP {ip_address} has been successfully removed.

    Details:
    - IP Address: {ip_address}
    - Removal Time: {removal_time}

    Best regards,
    Your System
    """
    try:
        logger.info(f"üìß Preparing to send email about IP {ip_address} removal at {removal_time}")

        # Create email message
        msg = EmailMessage()
        msg.set_content(EMAIL_BODY_TEMPLATE.format(ip_address=ip_address, removal_time=removal_time))
        msg["Subject"] = EMAIL_SUBJECT
        msg["From"] = EMAIL_SENDER
        msg["To"] = EMAIL_RECIPIENT

        # Secure connection and send email
        context = ssl.create_default_context()
        with smtplib.SMTP_SSL(SMTP_SERVER, SMTP_PORT, context=context) as server:
            server.login(EMAIL_SENDER, EMAIL_PASSWORD)
            server.send_message(msg)

        logger.info(f"‚úÖ Email successfully sent to {EMAIL_RECIPIENT} about IP {ip_address}")
    except Exception as e:
        logger.error(f"‚ùå Error sending email: {e}")



def extract_ip_and_port(ip_entry: dict) -> Tuple[str, int]:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç IP –∏ –ø–æ—Ä—Ç, –µ—Å–ª–∏ –ø–æ—Ä—Ç –Ω–µ —É–∫–∞–∑–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 16127."""
    ip_str = ip_entry.get("ip", "")
    match = re.match(r"([\d.]+)(?::(\d+))?", ip_str)
    if match:
        ip_address = match.group(1)
        port = int(match.group(2)) if match.group(2) else 16127
        return ip_address, port
    return ip_str, 16127


def log_response(response: requests.Response, server_name: str) -> None:
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.

    :param response: –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    :param server_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    """
    logger.debug(f"–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ {server_name} - –°—Ç–∞—Ç—É—Å: {response.status_code}")
    logger.debug(f"–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ {server_name} - –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {response.text}")


def get_app_location() -> List[Tuple[str, int]]:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ IP-–∞–¥—Ä–µ—Å–æ–≤ —Å –ø–æ—Ä—Ç–∞–º–∏."""
    params = {"appname": APP_NAME}
    try:
        response = requests.get(f"{FLUX_API_URL}/apps/location", params=params)
        response.raise_for_status()
        response_data = response.json()
        ip_list = [extract_ip_and_port(entry) for entry in response_data.get("data", [])]
        return ip_list  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (IP, –ø–æ—Ä—Ç)
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API Flux: {e}")
    except requests.exceptions.JSONDecodeError:
        logger.error("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ API Flux")
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    return []


def get_external_data() -> List[str]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ IP-–∞–¥—Ä–µ—Å–æ–≤ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.
    """
    try:
        response = requests.get(EXTERNAL_API_URL)
        log_response(response, "–í–Ω–µ—à–Ω–∏–π API (–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫)")
        response.raise_for_status()
        response_data = response.json()

        if 'blacklist' in response_data:
            return response_data['blacklist']
        else:
            logger.error("–û—à–∏–±–∫–∞: –∫–ª—é—á 'blacklist' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö.")
            return []
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –≤–Ω–µ—à–Ω–µ–º—É API: {e}")
    except requests.exceptions.JSONDecodeError:
        logger.error("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ –≤–Ω–µ—à–Ω–µ–≥–æ API")
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    return []


def is_ip_in_blacklist(ip_address: str) -> bool:
    """
    Check if the given IP address is blacklisted by invoking check_blacklist.py
    Return True if IP is blacklisted, otherwise False
    """
    try:
        result = subprocess.run(
            ["python3", "/fluxsign/check_blacklist.py", ip_address],
            capture_output=True,
            text=True
        )

        if result.returncode in [1, 3]:
            logger.warning(f"üö´ IP {ip_address} is blacklisted (code {result.returncode}).")
            return True
        elif result.returncode == 0:
            logger.info(f"‚úÖ IP {ip_address} is not blacklisted.")
            return False
        else:
            logger.error(f"‚ö†Ô∏è Unknown return code from check_blacklist.py: {result.returncode}")
            return False  # –∏–ª–∏ True ‚Äî –ø–æ —Å–∏—Ç—É–∞—Ü–∏–∏
    except Exception as e:
        logger.error(f"‚ùå Failed to run check_blacklist.py for {ip_address}: {e}")
        return False

def remove_app(loginphrase: str, signature: str, app_ip: str, port: int) -> bool:
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ GET –∑–∞–ø—Ä–æ—Å."""

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ LF (URL-encoded)
    def utf8_to_LF(value: str) -> str:
        return urllib.parse.quote(value)

    # –ü–µ—Ä–µ–∫–æ–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    encoded_flux_id = utf8_to_LF(FLUX_ID)
    encoded_signature = utf8_to_LF(signature)
    encoded_loginphrase = utf8_to_LF(loginphrase)

    # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—è IP –∞–¥—Ä–µ—Å –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
    url = f"http://{app_ip}:{port}/apps/appremove/{APP_NAME}/true/false"
    headers = {
        "zelidauth": f"zelid={encoded_flux_id}&signature={encoded_signature}&loginPhrase={encoded_loginphrase}"
    }

    try:
        response = requests.get(url, headers=headers)
        log_response(response, f"–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å IP: {app_ip}, –ø–æ—Ä—Ç: {port}")
        if response.status_code == 200:
            logger.info(f"–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ {APP_NAME} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ —Å {app_ip}:{port}")
            removal_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            send_email_after_removal(f"{app_ip}:{port}", removal_time)
            return True
        else:
            logger.error(
                f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å {app_ip}:{port}. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}, {response.text}")
            return False
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        return False


def get_loginphrase() -> Optional[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç loginphrase –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."""
    url = f"{FLUX_API_URL}/id/loginphrase"
    try:
        response = requests.get(url)
        log_response(response, "API Flux (loginphrase)")
        return response.json().get("data") if response.status_code == 200 else None
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è loginphrase: {e}")
    return None


def sign_message_in_js(message: str) -> str:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç `sign_message.js` –∏ –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
    :return: –ü–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    """
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º sign_message.js –∏–∑ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, —á—Ç–æ –∏ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç
        result = subprocess.run(
            ["sudo", "/usr/bin/node", "/fluxsign/sign_message.js", message],
            capture_output=True,
            text=True,
            check=True
        )
        return result.stdout.strip()
    except subprocess.CalledProcessError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ sign_message.js: {e.stderr}")
        return f"Error in JS script: {e.stderr}"



def provide_signature(loginphrase: str, signature: str) -> bool:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ø–æ–¥–ø–∏—Å—å —á–µ—Ä–µ–∑ API providesign."""
    url = f"{FLUX_API_URL}/id/providesign"
    payload = json.dumps({"address": FLUX_ID, "message": loginphrase, "signature": signature})
    headers = {"Content-Type": "text/plain"}
    try:
        response = requests.post(url, data=payload, headers=headers)
        log_response(response, "API Flux (providesign)")
        return response.status_code == 200 and response.json().get("status") == "success"
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏: {e}")
    return False

def verify_login(loginphrase: str, signature: str) -> Optional[dict]:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ª–æ–≥–∏–Ω —á–µ—Ä–µ–∑ API verifylogin."""
    url = f"{FLUX_API_URL}/id/verifylogin"
    payload = json.dumps({"loginPhrase": loginphrase, "zelid": FLUX_ID, "signature": signature})
    headers = {"Content-Type": "text/plain"}
    try:
        response = requests.post(url, data=payload, headers=headers)
        log_response(response, "API Flux (verifylogin)")
        if response.status_code == 200:
            response_data = response.json()
            return response_data["data"] if response_data.get("status") == "success" else None
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ª–æ–≥–∏–Ω–∞: {e}")
    return None

def authenticate() -> Tuple[Optional[str], Optional[str]]:
    """
    –ü—Ä–æ—Ü–µ—Å—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–¥–ø–∏—Å—å—é.
    """
    loginphrase = get_loginphrase()
    if not loginphrase:
        logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è loginphrase")
        return None, None

    try:
        signature = sign_message_in_js(loginphrase)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return None, None

    if not provide_signature(loginphrase, signature):
        logger.error("–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏")
        return None, None

    login_data = verify_login(loginphrase, signature)
    if not login_data:
        logger.error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        return None, None

    return loginphrase, signature


def compare_and_remove() -> None:
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ IP –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –ø–µ—Ä–µ–¥–∞–Ω –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–µ."""
    if len(sys.argv) != 2:
        logger.error("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω IP –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞!")
        sys.exit(1)

    container_ip = sys.argv[1]
    app_locations = get_app_location()

    matched_entries = [entry for entry in app_locations if entry[0] == container_ip]

    if not matched_entries:
        logger.error(f"‚ùå IP {container_ip} –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.")
        sys.exit(1)

    for ip, port in matched_entries:
        logger.info(f"üîç –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è IP {ip}:{port}...")
        loginphrase, signature = authenticate()

        if loginphrase and signature:
            success = remove_app(loginphrase, signature, ip, port)
            if not success:
                logger.error("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç –≤ start.sh.")
                sys.exit(1)
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏, —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")
            sys.exit(1)

    logger.info("‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–æ. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ start.sh.")
    return


if __name__ == "__main__":
    LOG_FILE = "email_notifications.log"
    logger.add(LOG_FILE, format="{time} {level} {message}", level="INFO", rotation="10 MB", compression="zip")
    compare_and_remove()

#!/bin/bash

# Function to load environment variables from .env file
load_env_variables() {
    if [ -f /app/.env ]; then
        # shellcheck disable=SC2046
        export $(grep -v '^#' /app/.env | xargs)
        echo "‚úÖ Variables from .env are loaded."
        return 0
    else
        echo "‚ùå .env was not found."
        return 1
    fi
}

# Infinite loop to attempt loading environment variables
while true; do
    if load_env_variables; then
        break
    else
        echo "Retrying in 5 minutes..."
        sleep 300
    fi
done


REMOTE_SCRIPT_PATH="/home/proxyuser/run_remove_app.py"
REMOTE_ADD_PROJECT_SCRIPT="/home/proxyuser/run_add_project_address.py"
REMOTE_BLACKLIST_SCRIPT="/fluxsign/check_blacklist.py"

log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') $1"
}

# –ü–æ–ª—É—á–∞–µ–º –≤–Ω–µ—à–Ω–∏–π IP –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
get_external_ip() {
    IP_SERVICES=(
        "https://ifconfig.me/ip"
        "https://icanhazip.com"
        "https://ipinfo.io/ip"
        "https://ifconfig.co/ip"
        "https://checkip.amazonaws.com/"
    )

    for SERVICE in "${IP_SERVICES[@]}"; do
        RESPONSE=$(curl -s --max-time 5 "$SERVICE")
        IP=$(echo "$RESPONSE" | grep -Eo '^([0-9]{1,3}\.){3}[0-9]{1,3}$')

        if [[ -n "$IP" ]]; then
            echo "$IP"
            return 0
        fi
    done

    return 1
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ–¥–µ–Ω–∏–π –æ–± IP —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Å—Ç—Ä–∞–Ω—ã
get_ip_info() {
    local TARGET_IP="$1"

    if [[ -n "$IPHUB_API_KEY" ]]; then
        local RESP
        RESP=$(curl -s -H "X-Key: $IPHUB_API_KEY" "https://v2.api.iphub.info/ip/$TARGET_IP")
        local IP_RES COUNTRY
        IP_RES=$(echo "$RESP" | jq -r '.ip // empty')
        COUNTRY=$(echo "$RESP" | jq -r '.countryCode // empty')
        if [[ -n "$IP_RES" && -n "$COUNTRY" ]]; then
            echo "$IP_RES|$COUNTRY"
            return 0
        fi
    fi

    local RESP2
    RESP2=$(curl -s "https://ipwho.is/$TARGET_IP")
    local IP_RES2 COUNTRY2
    IP_RES2=$(echo "$RESP2" | jq -r '.ip // empty')
    COUNTRY2=$(echo "$RESP2" | jq -r '.country_code // empty')
    if [[ -n "$IP_RES2" && -n "$COUNTRY2" ]]; then
        echo "$IP_RES2|$COUNTRY2"
        return 0
    fi

    local TOKEN_PARAM=""
    if [[ -n "$TWOIP_API_TOKEN" ]]; then
        TOKEN_PARAM="&key=$TWOIP_API_TOKEN"
    fi
    local RESP3
    RESP3=$(curl -s "https://api.2ip.io/geo.json?ip=$TARGET_IP$TOKEN_PARAM")
    local IP_RES3 COUNTRY3
    IP_RES3=$(echo "$RESP3" | jq -r '.ip // empty')
    COUNTRY3=$(echo "$RESP3" | jq -r '.country_code // empty')
    if [[ -n "$IP_RES3" && -n "$COUNTRY3" ]]; then
        echo "$IP_RES3|$COUNTRY3"
        return 0
    fi

    return 1
}

# –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –≤–Ω–µ—à–Ω–∏–π IP —Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–º –æ–∂–∏–¥–∞–Ω–∏–µ–º
while true; do
    CONTAINER_IP=$(get_external_ip)
    if [[ -n "$CONTAINER_IP" ]]; then
        IP_INFO=$(get_ip_info "$CONTAINER_IP")
        if [[ -n "$IP_INFO" ]]; then
            CONTAINER_IP="${IP_INFO%%|*}"
            COUNTRY_CODE="${IP_INFO##*|}"
            log "üåê External IP detected: $CONTAINER_IP ($COUNTRY_CODE)"
            break
        fi
    fi

    log "‚ùå Failed to determine external IP. Retrying in 15 minutes..."
    sleep 900
done

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ IP –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ
check_blacklist() {
    log "üîç Checking if IP $CONTAINER_IP is valid via remote script..."

    SSH_CMD="python3 $REMOTE_BLACKLIST_SCRIPT '$CONTAINER_IP' '$COUNTRY_CODE'"
    sshpass -p "$SSH_PASS" ssh -o StrictHostKeyChecking=no "$SSH_USER@$NGINX_HOST" "$SSH_CMD"
    EXIT_CODE=$?

    log "üì° Remote check exit code: $EXIT_CODE"

    case $EXIT_CODE in
        0)
            log "‚úÖ IP is valid. Proceeding with normal operation..."
            ;;
        1|3)
            log "‚ùå IP is blacklisted or blocked. Triggering remote removal..."

            while true; do
                sshpass -p "$SSH_PASS" ssh -o StrictHostKeyChecking=no "$SSH_USER@$NGINX_HOST" \
                    "python3 $REMOTE_SCRIPT_PATH '$CONTAINER_IP'"
                # shellcheck disable=SC2181
                if [[ $? -eq 0 ]]; then
                    log "‚úÖ remove_app.py executed successfully!"
                    exit 0
                else
                    log "‚ùå Error executing remove_app.py. Retrying in 5 minutes..."
                    sleep 300
                fi
            done
            ;;
        4)
            # Wait until next UTC midnight (simple conservative logic)
            SECONDS_NOW=$(date +%s)
            SECONDS_NEXT_DAY=$(date -d tomorrow +%s)
            WAIT_SECONDS=$((SECONDS_NEXT_DAY - SECONDS_NOW))

            # shellcheck disable=SC2004
            log "‚è≥ API quota exceeded. Waiting $WAIT_SECONDS seconds (~$(($WAIT_SECONDS / 60)) minutes)..."
            sleep "$WAIT_SECONDS"
            ;;
        2)
            log "‚ö†Ô∏è Invalid IP or local error during IP check. Retrying in 5 minutes..."
            sleep 300
            check_blacklist
            ;;
        5)
            log "‚ùå IPHub API error or invalid response. Retrying in 5 minutes..."
            sleep 300
            check_blacklist
            ;;
        6)
            log "‚ùå API key missing. Cannot check IP. Retrying in 10 minutes..."
            sleep 600
            check_blacklist
            ;;

        *)
            log "‚ùå Unknown error during remote IP check. Retrying in 5 minutes..."
            sleep 300
            check_blacklist
            ;;
    esac
}

add_project_address() {
    log "üì° Adding IP $CONTAINER_IP to project: $PROJECT_NAME with port: $AVAILABLE_PORT"
    ADD_PROJECT_RESPONSE=$(sshpass -p "$SSH_PASS" ssh -o StrictHostKeyChecking=no "$SSH_USER@$NGINX_HOST" \
        "python3 $REMOTE_ADD_PROJECT_SCRIPT '$CONTAINER_IP' '$PROJECT_NAME' '$AVAILABLE_PORT' '$COUNTRY_CODE'" 2>&1)
    log "üì° Response from run_add_project_address.py: $ADD_PROJECT_RESPONSE"
}

# –ò–∑–Ω–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
check_blacklist

log "üöÄ Starting 3proxy..."

#!/bin/bash

# Function to write the 3proxy configuration
write_config() {
    echo "üìÑ Writing to 3proxy.cfg with user $PROXY_USER..."

    cat <<EOF > /app/3proxy.cfg
auth strong
users $PROXY_USER:CL:$PROXY_PASS
socks -p1080
allow $PROXY_USER
EOF
}

# Infinite loop to attempt writing the configuration
while true; do
    write_config

    if grep -q "^users $PROXY_USER:CL:$PROXY_PASS" /app/3proxy.cfg; then
        echo "‚úÖ 3proxy.cfg successfully written!"
        break
    else
        echo "‚ùå Failed to write correct 3proxy.cfg. Retrying in 5 minutes..."
        sleep 300
    fi
done

# Start 3proxy in the background
3proxy /app/3proxy.cfg &


while true; do
    log "üîç Fetching available ports..."
    RESPONSE=$(curl -s http://$NGINX_HOST:$NGINX_PORT_API/available_ports)
    log "üì° API response (available_ports): $RESPONSE"

    log "üîç Checking if IP $CONTAINER_IP exists in ip_mapping..."
    IP_MAPPING_RESPONSE=$(curl -s http://$NGINX_HOST:$NGINX_PORT_API/ip_mapping.json)
    log "üì° API response (ip_mapping.json): $IP_MAPPING_RESPONSE"

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ IP –∫ –ø—Ä–æ–µ–∫—Ç—É
    PROJECT=$(echo "$IP_MAPPING_RESPONSE" | jq -r --arg CONTAINER_IP "$CONTAINER_IP" 'to_entries | map(select(.value[]? == $CONTAINER_IP)) | if length == 0 then null else .[0].key end')
    if [ -n "$PROJECT" ] && [ "$PROJECT" != "null" ]; then
        IP_FOUND=true  # IP —É–∂–µ –µ—Å—Ç—å –≤ ip_mapping
        log "üì° Project found: $PROJECT"
    else
        IP_FOUND=false # IP –Ω–æ–≤—ã–π, –∏—â–µ–º –ø—Ä–æ–µ–∫—Ç —Å –ø–æ—Ä—Ç–∞–º–∏
        log "üîé IP $CONTAINER_IP not found in any project. Searching for available project..."
        for PROJ in $(echo "$RESPONSE" | jq -r 'keys_unsorted[]' | grep -v '^other$'); do
            PORTS=$(echo "$RESPONSE" | jq -r --arg PROJECT "$PROJ" '.[$PROJECT].available_ports | .[]')
            if [ -n "$PORTS" ]; then
                PROJECT="$PROJ"
                log "‚úÖ Found available ports in project: $PROJECT"
                break
            fi
        done
        if [ -z "$PROJECT" ] || [ "$PROJECT" == "null" ]; then
            log "‚ùó No available ports in any project. Using fallback project: 'other'."
            PROJECT="other"
        fi
    fi

    # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É 5 —Ä–∞–∑ (–¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ $PROJECT)
    for i in {1..5}; do
        RESPONSE=$(curl -s http://$NGINX_HOST:$NGINX_PORT_API/available_ports)
        PROJECT_PORTS=$(echo "$RESPONSE" | jq -r --arg PROJECT "$PROJECT" '.[$PROJECT].available_ports | .[]')
        if [ -n "$PROJECT_PORTS" ]; then
            log "‚úÖ –°–≤–æ–±–æ–¥–Ω—ã–µ –ø–æ—Ä—Ç—ã –ø–æ—è–≤–∏–ª–∏—Å—å –≤ –ø—Ä–æ–µ–∫—Ç–µ $PROJECT"
            break
        fi
        log "‚ùå –ù–µ—Ç –ø–æ—Ä—Ç–æ–≤ –≤ $PROJECT. –ñ–¥—ë–º 1 –º–∏–Ω—É—Ç—É... ($i/5)"
        sleep 60
    done

    # –ï—Å–ª–∏ –ø–æ—Å–ª–µ 5 –ø–æ–ø—ã—Ç–æ–∫ –ø–æ—Ä—Ç–æ–≤ –Ω–µ—Ç, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
    if [ -z "$PROJECT_PORTS" ]; then
        log "‚è≥ 5 –º–∏–Ω—É—Ç –∏—Å—Ç–µ–∫–ª–∏. –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ $PROJECT."
        if [ "$IP_FOUND" = true ]; then
            # –£–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π IP: –Ω–µ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç, —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π 'other'
            log "‚ö†Ô∏è IP $CONTAINER_IP —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ $PROJECT ‚Äî –Ω–µ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è."
            bash /app/port_project_watcher.sh "$PROJECT" "$CONTAINER_IP" &
            RESPONSE=$(curl -s http://$NGINX_HOST:$NGINX_PORT_API/available_ports)
            PROJECT_PORTS=$(echo "$RESPONSE" | jq -r '."other".available_ports | .[]')
            if [ -n "$PROJECT_PORTS" ]; then
                PROJECT="other"
                log "‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–µ–∫—Ç 'other' –¥–ª—è IP $CONTAINER_IP"
            else
                log "‚ùå –ù–µ—Ç –ø–æ—Ä—Ç–æ–≤ –¥–∞–∂–µ –≤ 'other'. –ñ–¥—ë–º 5 –º–∏–Ω—É—Ç –∏ –≤—ã—Ö–æ–¥–∏–º."
                sleep 300
                exit 1
            fi
        else
            # –ù–æ–≤—ã–π IP: –ø–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ—Ä—Ç–∞–º
            RESPONSE=$(curl -s http://$NGINX_HOST:$NGINX_PORT_API/available_ports)
            log "üîÑ IP –Ω–æ–≤—ã–π, –ø–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç–æ–≤..."

            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –Ω–µ–ø—É—Å—Ç–æ–π –ø—Ä–æ–µ–∫—Ç (–∫—Ä–æ–º–µ other)
            for PROJ in $(echo "$RESPONSE" | jq -r 'keys_unsorted[]' | grep -v '^other$'); do
                PORTS=$(echo "$RESPONSE" | jq -r --arg PROJECT "$PROJ" '.[$PROJECT].available_ports | .[]')
                if [ -n "$PORTS" ]; then
                    PROJECT="$PROJ"
                    PROJECT_PORTS="$PORTS"
                    log "‚úÖ –ù–∞–π–¥–µ–Ω—ã –ø–æ—Ä—Ç—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ $PROJECT"
                    break
                fi
            done

            # –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë –Ω–µ—Ç –ø–æ—Ä—Ç–æ–≤, –¥–µ–ª–∞–µ–º —Ñ–æ–ª–±–µ–∫ –Ω–∞ other
            if [ -z "$PROJECT_PORTS" ]; then
                log "‚ùó –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ—Ä—Ç–æ–≤ –Ω–∏ –≤ –æ–¥–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ. –§–æ–ª–±–µ–∫ –Ω–∞ 'other'."
                PROJECT="other"
                RESPONSE=$(curl -s http://$NGINX_HOST:$NGINX_PORT_API/available_ports)
                PROJECT_PORTS=$(echo "$RESPONSE" | jq -r '."other".available_ports | .[]')
                if [ -z "$PROJECT_PORTS" ]; then
                    log "‚ùå –ù–µ—Ç –ø–æ—Ä—Ç–æ–≤ –¥–∞–∂–µ –≤ 'other'. –ñ–¥—ë–º –∏ –≤—ã—Ö–æ–¥–∏–º."
                    sleep 300
                    exit 1
                fi
            fi
        fi
    fi

    # === –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞ ===
    for PORT in $PROJECT_PORTS; do
        log "üîç Checking port $PORT for project $PROJECT...."
        if ! nc -z $NGINX_HOST $PORT 2>/dev/null; then
            log "üöÄ Port $PORT is free, using it!"
            AVAILABLE_PORT="$PORT"
            PROJECT_NAME="$PROJECT"
            add_project_address
            break
        fi
    done

    # –ï—Å–ª–∏ –ø–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –≤—ã—Ö–æ–¥–∏–º —Å –æ—à–∏–±–∫–æ–π
    if [ -z "$AVAILABLE_PORT" ]; then
        log "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç –≤ –ø—Ä–æ–µ–∫—Ç–µ $PROJECT"
        exit 1
    fi


    log "üîó Establishing SSH tunnel on port $AVAILABLE_PORT..."
    RESPONSE_SSH=$(sshpass -p "$SSH_PASS" ssh \
        -o StrictHostKeyChecking=no \
        -o ServerAliveInterval=30 \
        -o ExitOnForwardFailure=yes \
        -o ConnectTimeout=5 \
        -N -R 127.0.0.1:"$AVAILABLE_PORT":127.0.0.1:1080 \
        "$SSH_USER"@"$NGINX_HOST" -p "$NGINX_SSH_PORT" 2>&1)

    log "üì° SSH response: $RESPONSE_SSH"

    if echo "$RESPONSE_SSH" | grep -q "successfully"; then
        log "‚úÖ SSH tunnel established on port $AVAILABLE_PORT!"
    else
        log "‚ùå Error setting up SSH tunnel: $RESPONSE_SSH"
        sleep 10
        continue
    fi

    while true; do
        SSH_STATUS=$(sshpass -p "$SSH_PASS" ssh -o StrictHostKeyChecking=no \
            -o ConnectTimeout=5 \
            -o BatchMode=yes \
            -o ConnectionAttempts=1 \
            "$SSH_USER"@"$NGINX_HOST" -p "$NGINX_SSH_PORT" "echo SSH_OK" 2>&1)

        if echo "$SSH_STATUS" | grep -q "SSH_OK"; then
            log "üîÑ SSH tunnel is active."
        else
            log "‚ùå SSH tunnel lost connection."
            break
        fi

        sleep 10
    done
done
